"var str = str.trim() var i = 0 var sign = 1 var res = 0 while (i < str.length && str[i] =='') { i++ } if (i < str.length && str[i] == '-') { sign = -1; i++ } if (i < str.length && str[i] == '+') { i++ } while (i < str.length && str[i] >= '0' && str[i] <= '9') { res = res * 10 + (str[i] - '0') i++ } return sign * res } Question: class Solution { fun longestPalindrome(s: String): String { """""" Implement the `longestPalindrome(string s)` function, which finds the longest palindromic substring in a given string. The algorithm for `longestPalindrome(string s)` is as follows: 1. For each character in the string, expand around the center of the palindrome. 2. Keep track of the longest palindrome found so far. 3. Return the longest palindrome. """""" Answer: var res = """" for (i in 0 until s.length) {"
"class CustomStack { private val stack = mutableListOf<Int>() private var maxSize = maxSize fun push(x: Int): Unit { if (stack.size == maxSize) { throw IllegalArgumentException(""Stack is full"") } stack.add(x) } fun pop(): Int { if (stack.isEmpty()) { throw IllegalArgumentException(""Stack is empty"") } return stack.removeLast() } fun top(): Int { if (stack.isEmpty()) { throw IllegalArgumentExcept"
"var min = amount + 1 for (i in coins) { if (i <= amount) { min = Math.min(min, amount/i + 1) } } return min } } Question: class Solution { fun longestCommonPrefix(strs: List<String>): String { """""" Given an array of strings `strs`, return the longest common prefix string amongst all strings. If there is no common prefix, return an empty string """". """""" Answer: var res = """" for (i in 0 until strs[0].length) { if (strs.forEach { it.startsWith(res.substring(0, i)) }) { res = res.substring(0, i) } else { return res } } return res } } Question: class Solution { fun longestPalindrome(s: String): String { """""" Given a string `s`, return the longest palindromic substring in `s`. You may assume that the maximum length of `s` is 1000. """""" Answer: var res = """" for (i in 0 until s.length) { if (s.substring(i, i+1).equals(s.substring(i, i+1).reversed())) { res = s.substring(i, i+1) } } return res } } Question: class Solution { fun long"
class ListNode { var val: Int? var next: ListNode? init(val: Int) { this.val = val this.next = null } } class Solution { fun mergeTwoLists(l1: ListNode?, l2: ListNode?) { var head = ListNode() var current = head var l1_ptr = l1 var l2_ptr = l2 while (l1_ptr!= null && l2_ptr!= null) { if (l1_ptr.val < l2_ptr.val) { current.next = l1_ptr l1_ptr = l1_ptr.next } else { current.next = l2_ptr l2_ptr 
"var ans = 0 for (i in 0 until m) { ans += cost[i][target-1] } return ans } } Question: class Solution { fun longestCommonPrefix(strs: Array<String>): String { """""" Given an array of strings `strs`, return the longest common prefix string amongst them. If there is no common prefix, return an empty string """". """""" Answer: var ans = """" for (i in 0 until strs[0].length) { ans += strs.forEach { it.startsWith(strs[0].substring(i)) }.count == strs.size return strs[0].substring(0, i) } return ans } } Question: class Solution { fun longestPalindrome(s: String): String { """""" Given a string `s`, return the longest palindromic substring in `s`. """""" Answer: var ans = """" for (i in 0 until s.length) { ans += s.forEach { it.startsWith(s.substring(i)) }.count == s.length return s.substring(0, i) } return ans } } Question: class Solution { fun longestPalindrome(s: String): String { """""" Given a string `s`, return the longest palind"
class NumArray { private val nums: IntArray = mutableListOf<Int>() private val sum: Int = 0 private var left: Int = 0 private var right: Int = nums.size - 1 fun sumRange(i: Int, j: Int)
"var ans = mutableSetOf<List<Int>>() nums.size/4 for (i in 0 until nums.size-3) { for (j in i+1 until nums.size-2) { for (k in j+1 until nums.size-1) { for (l in k+1 until nums.size) { if (nums[i]+nums[j]+nums[k]+nums[l] == target) ans.add(listOf(nums[i], nums[j], nums[k], nums[l])) } } } } return ans } } Question: class Solution { fun fourSum(nums: IntArray, target: Int): List<List<Int>> { """""" Given an array `nums` of n integers and an integer `target`, are there elements a, b, c, and d in `nums` such that a + b + c + d = `target`? Find all unique quadruplets in the array which gives the su """""" Answer: var ans = mutableSetOf<List<Int>>() nums.size/4 for (i in 0 until"
"var map = mutableMapOf<Int, String>() for (i in 0 until s.length) { if (s[i] == '#') map[i+1] = 'a' else map[i+1] = map[i] + s[i] } return map.values.joinToString("""") } } Question: class Solution { fun longestPalindrome(s: Strin"
var maxSum = 0 for (i in 0 until nums.size) { var sum = 0 for (j in i until nums.size) { sum += nums[j] if (sum > maxSum) maxSum = sum } } ret
"var ans = """" for (i in 0 until n) { ans += (char) (i+97) } return ans } } Question: class Solution { fun longestPalindrome(s: String)"
var ans = 1 for (i in 1 until n) { ans += (i-1)*ans } return ans } } Question: class Solution { fun numSubmat
var head = head?.toList() mutableListOf<ListNode>() mutableListOf<ListNode>() mutableListOf<ListNode>() mutableListOf<ListNode>() mutableListOf<ListNode>() mutableListOf<ListNode>() mutableListOf<ListNode>() mutableListOf<ListNode>() mutableListOf<ListNode>() mutableListOf<ListNode>() mutableListOf<ListNode>() mutableListO
"var ans = Array<String>() for (i in 0 until names.size) ans.add(names[i]) return ans } } Question: class Solution { fun longestCommonPrefix(strs: Array<String>): String { """""" Given an array of strings `strs` of size `n`, return the longest common prefix string amongst all strings. The longest common prefix string is the longest "
class TreeNode { var val: Int? var left: TreeNode? var right: TreeNode? init(val: Int?, left: TreeNode?, right: TreeNode?) { self.val = val self.left = left self.right = right } } class Solution { fun largestValues(root: TreeNode?) { return largestValues(root, ArrayList<Int>()) } fun largestValues(root: TreeNode?, acc: List<Int>) { if (root == null) return acc val left = largestValues(root.left, acc) val right = lar
"var minPathSum = mutableListOf<Int>() for (i in 0 until triangle.size-1) { minPathSum.add(0) } for (i in 0 until triangle.size-1) { for (j in 0 until triangle[i].size-1) { minPathSum[i+1][j] = min(minPathSum[i][j], minPathSum[i][j+1]) + triangle[i][j] } } return minPathSum[0][0] } } Question: class Solution { fun longestCommonPrefix(strs: List<String>): String { """""
"var count = 0 for (i in 2 until n) { if (isPrime(i)) count++ } return count } Question: class Solution { fun countPrimes(n: Int): Int { """""" Count the number of prime numbers less than a non-negative number, `n`. Example 1: Input: n ="
"var visited = mutableSetOf<String>() var queue = mutableQueueOf<String>() queue.enqueue(beginWord) visited.add(beginWord) while (!queue.isEmpty()) { var word = queue.dequeue() if (word == endWord) return queue.size for (i in 0 until word.length) { for (j in 0 until 26) { var newWord = word.substring(0, i) + (char)(j + 'a').toString() + word.substring(i + 1) if (!visited.contains(newWord) && wordList.contains(newWord)) { queue.enqueue(newWord) visited.add(newWord) } } } } return 0 } } Question: class Solution { fun longestCommonPrefix(strs: List<String>): String { """""" Given an array of strings "
var dict = wordDict.toSet() val res = true for (i in 0 until s.size) { if (s.substring(i) in dict) { res = true } else { res = false } return res } return res } } Question: class Solution { fun longestPalindrome(s: 
var ans = 0 for (i in 0 until x.toString().length) { ans = ans * 10 + x.toString().charAt(x.toString().length - i - 1) } return ans 
"var ans = 1 for (i in 0 until n) { ans *= x } return ans } } Question: class Solution { fun findMin(nums: IntArray): Int { """""" Given an array `nums` of size `n`,"
"var ans = mutableListOf<List<Int>>() nums.sorted().forEach { for (i in 0 until nums.size-2) { for (j in i+1 until nums.size-1) { for (k in j+1 until nums.size) { if (nums[i] + nums[j] + nums[k] == 0) ans.add(List(nums[i], nums[j], nums[k])) } } } return ans } } Question: class Solution { fun threeSumClosest(nums: IntArray, target: Int): Int { """""" Given an integer array nums and an integer target, return the sum of the three integers in nums that is close"
var ans = 0 var stack = mutableListOf<Int>() for (i in 0 until s.length) { if (s[i] == '(') stack.add(i) else if (stack.isEmpty()) continue else ans = Math.max(ans, i - stack.removeLast()) } return ans } } Question: class Soluti
