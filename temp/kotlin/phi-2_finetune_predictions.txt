"val l = str.length var res = 0 var i = 0 while (i < l && str[i] =='') i++ if (i >= l) return res return (res = Math.max(res, Int.parse(str.substring(0, i)))) var c = 0 while (i < l && str[i]!='' && str[i]!= '+' && str[i]!= '-') { if (c == 1) { res = res * 10 + Int.parse(str.substring(i, i+1)) i++ c = 0 } else { c = 0 res = res + Int.parse(str.substring(i, i+1)) i++ } } if (c == 1) res = res * 10 return res } return res } } """""" """""" class Solution { fun myAtoi(str: String): Int { """""" Given a string `s`, convert it to an integer. The integer `i` is defined as follows: `i` is the sum of digits in `s` starting from the tail and working to the head. If `i` is greater than `2**31 - 1`, return `2**31 - 1`. If `i` is less than `-2**31`, return `-2**31`. Example 1: Input: s = ""42"" Output: 42 Explan"
class CustomStack(var top: Int = 0, var arr: IntArray = IntArray(1005), var res: IntArray = IntArray(1005)) { var cnt = 1 var n = arr.size var m = 1 var res[0] = arr[0] for (i in 1 until n) { if (top == cnt) { top = 0 cnt++ res[1] = arr[i] } else { res[top+1] = arr[i] top++ } } } fun push(x: Int): Int { if (top+1 >= n) { res[top+1] += 1 return res[top+1] } else { arr[top+1] += x top++ return t
"val n = coins.size var dp = IntArray(amount+1, {0}) var res = IntArray(amount+1, {0}) for (i in 1 until amount) { for (j in 1 until n) { dp[i] = Math.min(dp[i], dp[i-coins[j]]+1) if (dp[i] == 1) res[i] = j } } return res[amount].toInt() } } """""" Given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money, return the fewest number of coins that you need to m """""" mutableMapOf<Int, Int> dp = IntArray(amount+1, {0}) res = IntArray(amount+1, {0}) for (i in 1 until amount) { for (j in 1 until n) { dp[i] = Math.min(dp[i], dp[i-coins[j]]+1) if (dp[i] == 1) res[i] = j } } return res[amount].toInt() } } """""" class Solution { fun coinChange(coins: IntArray, amount: Int): Int { """""" Given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money, return the fewest number of coins that "
"val mm = mutableMapOf<Int, ListNode>() l1.forEach { mm.put(it.`val`, mm.getOrElse(it.`val`, ListNode(it.`val`))) } l2.forEach { mm.put(it.`val`, mm.getOrElse(it.`val`, ListNode(it.`val`))) } var head = ListNode(0) var p = head var cnt = 0 for (k in mm.keys()) { if (cnt == n/2) break cnt++ p.next = mm.get(k) p = p.next } return head.next } } """""" """""" class Solution { private val n = 0 fun mergeTw"
"val mm = mutableMapOf<Int, Int>() for (i in 0 until houses.size) { mm.put(i, mm.getOrDefault(i, 0)+cost[i][target]) if (mm.get(i, 0) > n) return i } var res = 0 for (i in 0 until n) { var cnt = 0 val x = 0 while (mm.get(x, 0) >= n) { x++ cnt++ } if (cnt >= m) res++ mm.remove(x) } return res } } """""" """""" """""" """""" return 0 } } """""" """""" class Solution { fun threeSumClosest(nums: IntArray, target: Int): Int { """""" Given an array `nums` of `n` integers and an integer `target`, find three integers in `nums` such that the sum is closest to `target`. Return the sum of the three integers. You may assume that each inpu """""" """""" """""" """""" var ans = Int.MAX_VALUE var minDiff = Int.MAX_VALUE var res = 0 var mm = mutableMapOf<Int, Int> for (i in 0 until nums.size-2) { var temp = nums[i] var j = i+1 var k = nums.size-1 while (j < k) { var sum = temp+nums[j]+nums[k] var diff = Math.abs(sum-target) if (diff < minDiff) { res = sum minD"
"val n = nums.size var res = 0 for (i in i until j) { res += nums[i] } return res } } """""" class Solution { private val n: Int = 0 fun sumRange(i: Int, j: Int): Int { var res = 0 for (x i"
"val mm = mutableMapOf<Int, Int>() nums.forEach { mm.put(it, mm.getOrDefault(it, 0)+1) } var res = ArrayList<List<Int>>() var twoSum = mutableMapOf<Int, Int>() var i = 0 while (i < n-3) { var j = i+1 var k = i+2 while (j < n-2) { var sum = mm.get(nums[i]+nums[j]) var p = twoSum.getOrElse(sum, mutableListOf<Int>) if (p.size == 2) { res.add(p.toList() + [nums[k]]) twoSum[sum] = p+[nums[k]] } while (k < n) { if (mm.get(nums[i]+nums[k]) == sum) { res.add(p.toList() + [nums[k]]) twoSum[sum] = p+[nums[k]] } k++ } i++ } return res } } """""" """""" Given an array `nums` of n integers and an integer `target`, are there elements a, b, c, and d in `nums` such that a + b + c + d = `ta"
"val ans = mutableListOf<Char>() var cnt = mutableMapOf<Char, Int>() s.forEach { cnt[it] = cnt.getOrElse(it, 0)+1 if (cnt[it] > n/2) ans.add(it) } return ans.joinToString() } } """""" """""" """""" """""" return """" for (i in 0 until n) { if "
"val n = nums.size var ans = 0 var curr = 0 for (i in 0 until n) { curr = curr+nums[i] if (curr > ans) ans = curr } return ans } } """""" """""" Give"
"var res = mutableListOf<Char>() var cnt = mutableMapOf<Char, Int>() for (i in 0 until n) { cnt[i] = 0 res.add(i) } var ans = """" while"
var res = mutableLis(0 until n) var dp = Array(n+1){1} dp[0] = 1 for (i in 1 until n) { for (j in i until n) 
"val n = head.size-k var p = head var fast = head for (i in 0 until n) if (i+k-1!= n) { fast = fast.next } var slow = head var temp = head while (fast!= null && fast.next!= null) { temp = fast.next fast = fast.next.next slow = slow.next temp.next = slow slow = slow.next } slow.next = temp return p } } """""" """""" """""" """""" """""" """""
"val n = names.size var res = mutableListOf<String>() for (i in 0 until n) { res.add(names[i]) } return res.toArray() } } """""" """""" Given an array of integers `nums`, return the sum of the elements between indices `[low]` and `[high]`, inclusive. The length of `nums` is `n >= 1`. `low` and `high` are non-negative integers such that"
"val n = 0 val res = mutableListOf<Int>() for (i in 0 until n) { res.add(0) n++ } var cnt = mutableListOf<Int>() var p = root var cnt[0] while (p!= null) { cnt[p?.left?.`val`:0]+=1 cnt[p?.right?.`val`:0]+=1 if (cnt[p?.left?.`val`] > n/2) res[cnt[p?.left?.`val`].toInt()] = p?.`val` p = p?.right? } return res } } """""" } class Solution { val n = 0 val res = mutableListOf<Int>() var cnt = mutableListOf<Int>(n) var p = roo"
"val n = triangle.size var res = 0 mutableListOf<Int> res = mutableListOf<Int>(n) res[0] = triangle[0][0] for (i in 1 until n) { for (j in 0 until i) { val x = res[j] if (j == 0) res[j] = triangle[i][j] else res[j] = Math.min(res[j], res[j-1]) + triangle[i][j] } } return res[n-1] } } """""" """""" class Solution { private val ans: Int = 0 fun minimumTotal(triangle: List<L"
"val mm = mutableMapOf<Int, Int>() var res = 0 for (i in 0 until n) { if (i > 1) { for (j in 2 until i) { mm.put(j, mm.getOrElse(j, 0)+1) if (mm.get(j) == 2) res++ } } } return res } } """""" """""" class Solution { private val mm: MutableM"
val mm = mutableMapOf<String, Int>() for (w in wordList) { mm.put(w, 1+if(w!= beginWord && w.length == beginWord.length && beginWord.charAt(i) == w.charAt(i))) } var cnt = 1 var res = 1 var q = Array<MutableMap<String, Int>>(30) q[0] = mm var visited = BooleanArray(30) visited[0] = true while (cnt > 0 &&!q[cnt-1].isEmpty()) { val top = q[cnt-1].getOrElse(0) for ( (k,v) in top ) { if (v == cnt) { res++ cnt-- if (cnt == 0) break var ok = true for ( (k2,v2) in mm ) { if (!visited[k2.length] && (k2!= beginWord && k2.charAt(i) == top.charAt(i))) { ok = true var cnt2 = 1 var q[cnt2] = mm.getMutableM
val idx = IntArray(s.length) var cnt = 0 for (i in 0 until s.length) { if (cnt == 0) { cnt = 1; idx[i] = i+1 } else { cnt++ if (wordDict.contains(s[i])) { idx[i] = i+1; cnt++ } else { break; } } } for (i in 1 until 
val low = -231 val high = 231-1 var ans = 0 var cnt = 0 while (x > 0) { ans = ans*10+x%10 cnt++ if (cnt > mid) { ans = ans*10+x%10 c
"var ans = 1 double(x) var res = ans for (i in 0 until n) { ans *= x if (i%2 == 1) res *= ans if (i%2 == 0) res *= 1.0/ans } return res } } """""" """""" class Solution"
"val res = mutableListOf<MutableList<Int>>() nums.sort() for (i in 0 until nums.size-2) { var left = i+1 var right = nums.size-1 while (left < right) { val sum = nums[i]+nums[left]+nums[right] if (sum == 0) { res.add(List<Int>(nums[i], nums[left], nums[right])) while (left < right && nums[left] == nums[left+1]) left++ while (left < right && nums[right] == nums[right-1]) right-- } if (sum > 0) right-- else left++ } } return res } } """""" """""" [ [-1,0,1], [-2,"
val mm = mutableMapOf<Int, Int>() var ans = 0 var cnt = 0 for (i in 0 until s.length) { if (s[i] == '(') { cnt++ mm.put(cnt, cnt+1) } else { cnt-- if (cnt >= 0) { ans = Math.max(ans, mm.getOrElse(cnt,-1)) cnt-- } } } return ans 
