val cnt = mutableMapOf<Char, Int>() for (i in 0 until str.length) { if (str[i] == '-') break cnt[str[i]] = cnt.getOrElse(str[i], 0) cnt[str[i]]++ if (cnt[str[i]] > 1) return -1 } return cnt.getOrElse(str[0], 0).toInt() } }
"val n = nums.size var res = 0 for (i in 0 until n) { if (mm.get(i) > n/2) { res = i var mm = mutableMapOf<Int, Int>() mm[i] = 1 } else { mm[i] = 1 } } if (res < n/2) { return -1 } return i """""" <li>takes in an integer `n` which represents the size of an array `nums`: `val n = nums.size val n = nums.size val mm = mutableMapOf<Int, Int>() for (i in 0 until n) { mm[i] = n-2*i-1 if (mm.get(i) > n/2"
val ans = 0 for (i in 0 until amount) { for (j in 0 until coins.size) { if (coins[j] <= amount && amount-coins[j] > 0) { ans = Math.min(ans, 1+coinChange(coins, amount-coins[j])) } } } return ans } }
val ans = ListNode?() var p1 = l1 var p2 = l2 while (p1!= null && p2!= null) { if (p1.val < p2.val) { ans = ListNode(p1.val, ans) p1 = p1.next } else { ans = ListNode(p2.val, ans) p2 = p2.next } } return ans if (p1!= null) ans = ListNode(p1.val, ans) p1 = p1.next if (p2!= null) ans = ListNode(p2.val, ans) p2 = p2.next return ans } } Question: class Solution { fun findMedian(nums: IntArray): Int
"val ans = 0 for (i in 0 until m) { ans += cost[i] * n if (houses[i] == m) continue var dp = IntArray(n+1, {0}) dp[0] = houses[i].toInt() for (j in 1 until n) dp[j] = Math.min(dp[j-1], dp[j]+1) if (dp[m] > dp[n-1]) return dp[n-1] } } """""""
val n = nums.size var ans = 0 for (i in 0 until n) { if (nums[i] > mm.getOrElse(i, 0)) ans += i+1 } return ans }
"val n = nums.size var ans = mutableListOf<List<Int>>(4) for (i in 0 until n) { for (j in i+1 until n) { for (k in j+1 until n) { for (l in k+1 until n) { val temp = target-nums[i]-nums[j]-nums[k]-nums[l] if (temp < 0) break if (nums[i]*nums[j]*nums[k]*nums[l] > 0) ans.add(i+1+j+k+l) } } } } return ans } } Question: class Solution { fun fourSum(nums: IntArray, target: Int): List<List<Int>> { """""" Given an array `nums` of n integers and an integer `target`, are there elements a, b, c, and d in `nums` such that a + b + c + d = `target`? Find all unique quadruplets in the array which gives the su """""" val n = nums.size var ans = mutableListOf<List<Int>>(4) for (i in 0 unti"
"val ans = """" for (i in 0 until s.size) { if (i == s.size-1) ans += s[i] else if (mm.getOrDefault(s[i], 0) > 1) ans += i+'a' var l = 0 var cnt = 0 for (j in 0 until s.size) { if (s[j] == '#') { l++ if (cnt > mm.getOrDefault(l, 0)"
val ans = 0 for (i in 0 until nums.size) { ans += nums[i] if (i == nums.size-1) return ans-nums[i] or ans-nums[i] } return ans }
"val n = 30 return """".toCharArray() for (i in 0 until n) { if (mm.getOrDefault(i, 0) == 0) break var c = ""-"" var count = 0 for (j in 0"
val n = nums.size var ans = 0 for (i in 1 until n) { val left = nums[i*2-1] val right = nums[(i+1)*2-1] if (l
val n = nums.size var ans = ListNode() var p = head var cnt = 0 while (cnt < k) { ans.next = p var p = p.next val = p.next?.next:null cnt++ } ans.next = head var return ans }
val n = names.size var ans = Array<String>() for (i in 0 until n) { if (mm.get(names[i]) > n/2) ans.add(names[i]) mm.put(names[i], mm.getOrDefault(names[i], 0)+1) } return ans } }
val ans = List<Int>() while (root!= null) { if (root.left!= null) { ans.add(root.left.`val`) } root = root.left if (root.right!= null) { ans.add(root.right.`val`) } root = null } return ans.toList() } }
"val n = triangle.size val ans = 0 for (i in 0 until n) { ans = Math.min(ans, triangle[i].size()-i+1) for (j in i+1 until n) ans = Math.min(ans, triangle[i].size()-j+1) } return ans } """""" Answer: val n = triangle.size val ans = 0 for (i in 0 until n) { ans = Math.min(ans, triangle[i].size()-i+1) for (j in i+1 until n) ans = Math.min(ans, triangle[i].size()-j+1) ans "
"val ans = 0 for (i in 0 until n) { if (mm.get(i) > n/2) ans++ mm.put(i, i+1) } return ans } } Question: class Solution { fun findMedian(n: Int, nums: IntArray): Int { """""" Given an array `nums` of length `n` and an integer `k`, return"
"val Q: List<Int> = mutableListOf(0) var ans = 0 for (i in 0 until wordList.size) { for (j in 0 until wordList.size) { if (beginWord.startWith(wordList[i].toString())) Q[Q.size+1] = i Q[Q.size+1]+1 if (endWord.startWith(wordList[j].toString())) { ans = Math.max(ans, Q[Q.size+1]) } } } return ans } } Question: class Solution { fun numRookCaptures(board: Array<String>, start: Int, end: Int): Int { """""" On the `""board""` string, the `""start""` index represents the location on the chessboard where the first rook was positioned, and the `""end""` index represents the location on the chessboard where the "
val n = s.size var ans = mutableListOf<Boolean>() var go = BooleanArray(wordDict.size) for (i in 0 until n) { if (i == n-1) { ans.add(true) go[i-1] = true for (j in 0 until i) { if (i-j >= 0 && go[i-j] && s[i-j].len
val n = nums.size var ans = 0 for (i in nums.size-1 down-to-zero if (nums[i] > 0) { ans = 10*ans+nums[i] ans-=10*(n-1-i) } return an
val ans = 0 for (i in 0 until n) { ans = ans + if (mm.get(i)) { i } } return ans / 2 } }
val n = nums.size var ans = mutableListOf<List<Int>>() for (i in 0 until n-2) { for (j in i+1 until n-1) { if (i!= j) { val temp = nums.get(i) nums.get(j) nums.get(i+1) while (i+1 < n) { if (temp + nums.get(i+1) == 0) { ans.add(listOf(i, j, i+1)) i++ break } nums.get(i+1) }) } } return ans } } Question: class Solution { private fun threeSum(nums: IntArray): List<List<Int>> { return { for (i in 0 until nums.size-2) { for (j in i+1 until nums.size-1) { val
val n = s.size var ans = 0 for (i in 0 until n) { if (s[i] == '(') ans++ if (s[i] == ')') ans-- if (ans < 0) { ans = 0 } } return ans } }
