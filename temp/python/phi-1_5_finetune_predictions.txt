logger.debug(message) def debug(user, messag
db.session.add(Message(user=user, content=mess
if 'userId' in response: user_id = response['userId'] if user_id == self.id: messages = self.get_messages(request) for message in messages: response['messages'].append(message) return response def get_messages(self
"return Table(name, self, auth, eager) def all(self): """""" Returns a list of all tables in the database. """""" return [t for t in sel"
"def decorator(view): """""" View decorator that handles JSON based API requests and responses consistently. """""" if not methods: methods = ['GET'] if not require_token: return view endpoint = '{}/{}'.format(request.url, request.path) headers = {'Authorization': 'Bearer {}'.format(request.headers['Token']) if request.headers['Token'] else ''} response = requests.request(method, endpoint, headers=headers) if response.status_code!= 200: raise ApiException('{} {}'.format(response.status_code, response.text)) return JsonResponse(response.json()) """""" View decorator that handles JSON based API requests and responses consistently. """""" return decorator """""" View decorator that handles JSON based API requests and responses consistently. """""" return decorator """""" View decorator that handles JSON based API requests and responses consistently. """""" return decorator """""" View decorator that handles JSON based API requests and responses consistently. """""" return decorator """""" View decorator that handles JSON based API requests and res"
"tweets = [] for page in xrange(pages): tweet = self.get_tweet(user) if tweet: tweets.append(tweet) return tweets def get_tweet(user): """""" Gets a single tweet for a given user, via the Twitter frontend API. """""" url = '%s/statuses/user_%s/tweet' % (API_URL, user) response = self.__http_get(url) if response: tweet = Tweet(user, response['id_str'], response['full_text']) return tweet return None def get_user_tweets(user): """""" Gets all tweets for a given user, via the Twitter frontend API. """""" url = '%s/statuses/user_%s/tweets' % (API_URL, user) response = self.__http_get(url) if response: tweets = [] for tweet in response['statuses']: tweets.append(Tweet(user, tweet['id_str'], tweet['full_text'])) return tweets def get_user_followers(user): """""" Gets all followers for a given user, via the Twitter frontend API. """""" url = '%s/statuses/user_%s/followers' % (API_URL, user) response = self.__http_get(url) if response: followers = [] for follower in response['statuses']: followers.append(Follower(user, follower['id_str'])) return followers def get_user_friends(user): """""" Gets all friends for a given user, via the Twitter frontend API. """""" url = '%s/statuses/user_%s/friends' % (API_URL, user) response = self.__http_get(url) if response: friends = [] for friend in response['statuses']: friends.append(Follower(user, friend['id_str'])) return friends def get_user_following(user): """""" Gets all followers for a given user, via the Twitter frontend API. """""" url = '%s/statuses/user_%s/followers' % (API_URL, user) response = self.__http_get(url) if response: followers = [] for follower in response['statuses']: followers.append(Follower(user, follower['id_str'])) return followers def get_user_friends(user): """""" Gets all friends for a"
"return data def add_displacement(chn_names, data): """""" From circularity, compute the displacement """""" return data def add_velocity(chn_names"
leaves = [] for child in self.children: leav
curr = self.root for i in range(len(label)): if cu
return [self.val] def get_leaf_values(self
"return cls(name=name, length=length, descendants=descendants, **kw) class Leaf(Node): """""" A `Node` object with no children."
"return self._newick """""" @property<DEDENT> """""" The representation of the Node in DEDENT format. """""" return None """""" @property<DOT> """""" The representation of the Node in DOT format. """""" return None """""" @property<EOL> "
"return [Tree(t, strip_comments=strip_comments) for t in nt.split(s)] class Tree(object): """""" A sim"
return self.visit(visitor, predicate, **kw) def visit(self, visitor, predicate=None
return '\n'.join(self.inorder(show_internal)) if strict else u'' if __name__ == '__main__': import doctest doctest.testmod() <|endoftext|>import numpy as np import matplotlib.pyplot as plt from sklearn.metrics import mean_squared_error from sklearn.linear_model import LinearRegression from sklearn.preprocessing import PolynomialFeatures # Generate some random data np.random.seed(0) x = 2 - 3 * np.random.normal(0, 1, 20) y = x - 2 * (
self
self
data = self.connection.recv(bu
"return b"""", True """""" class Pyp"
self.f.write(m
"return self._loop.create_future() def __call__(self, cmd, value=None, timeout=None): # def __call__(self, cmd, value=None, timeout=None): """""" Hang until command is received. If value is supplied, i"
"# Connect to LASAF response = await self.__class__.send(self.__class__.CAM_SOCKET, b""CONNECT"") if response!= self.__class__.CAM_SUCCESS: raise Exception(""F"
if isinstance(commands, list): for command in commands: self.cam.send(command) elif
"pass class TextStream(Stream): """""" Read a sequence of characters from the i"
"logger_name = function.__name__ logger_class = getattr(logging, logger_name, None) if logger_class and not hasattr(logger_class, ""debug""): logger_class.debug(function.__doc__) return function def wrapper(*args, **kwargs): """""" Wrapper function fo"
"self.driver.start_job(self.id, ""autofocus"") def stop_autofocu"
self.sock.close() #
"return q[1:] if q[0] == '#' else q[1:] def give_a_new_line(s): """""" When you p"
"pass class ManageIQ_V2(ManageIQ): """""" C"
"return result[""_id""] # Run the query return self.db.collection(self.__class__.__name__).find({""href"": href}) except Exception as e: # Rollback the transaction self.db.unhook() raise e def insert(self, entity): """""" Inserts an entity into the database. :param entity: Entity to insert """""" # Insert the entity self.db.collection(self.__class__.__name__).insert_one(entity) def update(self, entity, data): """""" Updates an entity in the database. :param entity: Entity to "
return self.__class__(self, {'_id': params.get('_id')}) def fi
"import os if create: open(os.path.join(os.getcwd(), section, '__pycache__'), 'w').write(value + '\n') else: open(os.path.join(os.getcwd(), section, '__pycache__'), 'r+').read().replace(value, '\n' + value + '\n') open(os.path.join(os.getcwd(), section, '__pycache__'), 'r').read() """""" <STR_LIT> The value of the "
import os import json import click import phusion import phusion_path import json import phusion_cli import phusion_cli_cli import phusion_cli_cli_edit import phusion_cli_cli_create import click import json import phusion import phusion_path import quiet import edit import create import sys import json import phusion import phusion_path import quiet import edit import create import click import json import phusion import phusion_path import quiet import edit import create import sys import json import phusion import phusion_path import quiet import edit import create import click import json import phusion import phusion_path import quiet import edit import create import
ctx.obj['edit'] = edit ctx.obj['create'] = create ctx.obj['help'] = '<STR_LIT>' if ctx.obj['<STR_LIT>']: ctx.obj['run'] = lambda: ctx.obj['run'](ctx) else: ctx.obj['run'] = lambda: ctx.obj['run'](ctx, create=False) ctx.obj['run'].main() ctx.obj['run'].main() ctx.obj['run'].main() ctx.obj['run'].main() ctx.obj['run'].main() ctx.obj['run'].main() ctx.obj['run'].main() ctx.obj['run'].
import os import shutil import tempfile import subprocess import tempfile import tempfile import shutil import tempfile import tempfile import shutil import tempfile import tempfile import shutil import tempfile import tempfile import shutil import tempfile import tempfile import tempfile import shutil import tempfile import tempfile import tempfile 
"return ''' <link rel=""stylesheet"" href=""{% static 'twbs/djfrontend_twbs_theme.css' %}""> ''' # TODO: add djfrontend_twbs_theme_js # TODO: add djfrontend_twbs_theme_js # TODO: add djfrontend_twbs_theme_js # TODO: add djfrontend_twbs_theme_js # TODO: add djfro"
"return ''' <script type=""text/javascript"" src=""%s""></script> ''' % get_djfrontend_jquery(version) """""" """""" Included in HTML5 Boilerplate. """""" return '' """""" Included in HTML5 Boilerplate. """""" """""" <script type=""tex"
"# TODO: add other choices return '\n'.join([ 'all returns concatenated file; full file for TEMPLATE_DEBUG, minified otherwise
return self.api.search(q=kwargs['entity_id'], entity_type=kwargs['entity_type'], start=kwargs['start'], count=kwargs['count']) if __name__ == '__main__': loc = Location() print(loc.search(entity_id=1, entity_type='city')) 
return self.api_response_string(self.restaurant_details, restaurant_id) def getReservationDetails(se
return [{'type':'restaurant'}] if __name__ == '__main__': pass <|endoftext|># Copyright (c) Facebook, Inc. and its affiliates. # # This source code is licensed under the MIT license fou
"return [Cell(json.loads(cell)) for cell in self.cells] class Cell(object): """""" A class representing a single cell in the MozillaClub spreadsheet feed. """""" def __init__(self, json): """""" Construct a Cell object from a json string. """""" self.json = json self.title = json[""title""] self.link = json[""link""] self.published = self.parse_published() self.published_at = self.parse_published_at() self."
"return self.cells[0].get_fields() def __get_cell_values(self, row, col): """""" Get the cell value from the cells received. """""" return self.cells[row][col].get_value() def __get_cell_type(self, row, col): """""" Get the cell type from the cells received. """""" return self.cells[row][col].get_type() def __get_cell_data(self, row, col): """""" Get the cell data from the cells received. """""" return self"
return True 
"return self.list(category=category, offset=offset, limit=PAGINATION_LIMIT) def get_events(self, category=CATEGORY_EVENT, offset=REMO_DEFAULT_OFFSET): """""" Retrieve all events for category using pagination """""" return self.list(category=category, offset=offset, limit=PAGINATION_LIMIT) def get_categories(self): """""" Retrieve all categories using pagination """""" return self.list(category=CATEGORY_EVENT, offset=0, limit=PAGINATION_LIMIT) def get_category(self, category_id): """""" Retrieve a category using pagination """""" return self.list(category=category_id, offset=0, limit=PAGINATION_LIMIT) def get_categories_by_name(self, name): """""" Retrieve all categories by name using pagination """""""
return {'offset': item.offset}
return True
return self._backend.fetch_items(category, **kwargs)
"return cls.get_parser() </DEDENT> """""" Returns the ReMo argument parser. """""" return cls.get_parser() </DEDENT> """""" Returns the ReMo argument parser. """""" return cls.get_p"
"l = self.list l.sort(key=lambda x: x.name) for x in l: print x.name """""" Get crates in alphabetical order """""" l = s"
return True 
"return self.__repr__() def fetch_json(self, url, payload=None): """""""
params = {'path': path} if page > 1: params['page'] = page response = self.session.get(self.API_URL, params=params) response_json = response.json() items = response_json['items'] for item in items: yield {'id': item['id'], 'name': item['name'], 'price': item['price']} if page < response_json['total_pages']: params['page'] = page + 1 else: params['page'] = 1 response = self.session.get(self.API_URL, params=params) response_json = response.json() items = resp
self.client = Client(self.project_id, self.token, from_archive) 
"return item.metadata.category </DEDENT> """""" return item.metadata.ca"
"return cls.add_argument_parser('crate', help='The crate to install') </DEDENT>"""""" return cls.add_argument_parser('-i', '--install', help='Install the crate') </DEDENT>"""""" return cls.add_argument_parser('-u', '--update', help='Update the c"
response = self._session.get(CRATES_API_URL + '/' + category + '/') response.raise_for_status() data = response.json() for item in data['items']: {'name': item['name
"return self.__summaries__ def create(self, name, description, tags, crated_class): """""" Create Crat"
"return self.db.get_question_answers(question_id) def get_question_context(self, question_id): """""" Retrieve the context for a question from older to newer (updated) """""" return self.db.get_question_context(question_id) def get_question_meta(self, question_id): """""" Retrieve the met"
"return self._get_id_list('questions', offset=offset) def get_answers(self, offset=None): """""" Retrieve answers from older to newer updated starting offset """""" return self._get_id_list('answers', offset=offset) def get_feedback(self, offset=None): """""" Retrieve feedback from older to newer updated starting offset """""" return self._get_id_list('feedback', off"
self.client = Client(self.url, self.token, from_archive) d
"return {'offset': item.meta['offset']} def metadata(self, item, filter_classified=False): """""" Kitsune metadata"
"return self.session.post(self.base_url + '/oauth2/token', data=data) def get_refresh_token_from_post_data(self, data): """""" Get a refresh token response from POST data. :param data: POST data containing refresh token information. :type data: dict :rtype: requests.Response """""" return self.session.post(self.base_url + '/oauth2/token', data=data) def get_token_response_from_url(self, url): """""" Get a token response from a UR"
"params = parse_qs(uri[7:]) return params[0][0] finally: if self.debug: print >> sys.stderr, ""-"" * 80 try: response = self.client.get(uri) except Exception, e: #except Exception, e: print >> sys.stderr, ""Failed to get response from %s"" % uri return None if response.status!= 200: #if response.status!= 200: print >> sys.stderr, ""Failed to get response from %s"" % uri return None authorization_code = response.headers.get(""Authorization"") if authorization_code is None: #if authorization_code is None: return None authorization_code = au"
"return self.response """""" What to return w"
"import jwt payload = { ""grant_type"": grant_type, ""client_id"": client_id, ""client_secret"": client_secret, ""redirect_uri"": redirect_uri, ""code"": code, **params } jwt_token = jwt.encode(payload, self.SECRET, algorithm=self.ALGORITHM) return jwt_token </Code> ``` python # Solution import jwt grant_type = ""authorization_code"" client_id = ""abc"" client_secret = ""def"" redirect_uri = ""ghi"" code = ""123"" payload = { ""grant_type"": grant_type, ""client_id"": client_id, ""client_secret"": client_secret, ""redirect_uri"": redirect_uri, ""code"": code } jwt_token = jwt.encode(payload, self.SECRET, algorithm=self.ALGORITHM) print(jwt_token) ``` ``` python # Output b'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkpXVCJ9.cQmYW5WzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJzRzJz"
return s
return exc # Register the handler handler = register_handl
"return self._call_api(['POST'], ['token'], code=code, **params) def get_refresh_token(self, code, **params): """""" Get a refresh token from the provider token URI. :param code: Authorization code. :type code: str :return: Dict containing refresh token, access token, etc. :rtype: d"
"return dict(urllib.parse.parse_qsl(url[url.rfind('?'):])) """""" Retur"
self.addTypeEqualityFunc(float, self.addFloat) self.addTypeEqualityFunc(int, self.addInt) self.addTypeEqualityFunc(str, self.addStr) self.addTypeEqualityFunc(list, self.addList) self.addTypeEqualityF
self.parser = argparse.ArgumentParser(description='A sim
"with open(fname) as f: return f.read() def jsonTo(fname): """""" Save JSON to a f"
return HeadNode.remove(self, n
# These are the classes you'll define in this test if you want to: # ============================================================================== # Define Class # ============
"# Don't add the test case class to the test case list # don't add the test case function to the test case list self.addTests([""AddTwoNumbers"", ""AddTwoNumbers""]) # Don't add the test case string array to the test case list # don't add the test case StringArray class to the test case list self.addTests([]) # 2 nodes for each test case class # don't add the test case String class to the test case list # don't add the "
self.headers['Content-
"pass def response(self, code, headers, body): """""" Pretend to make a response """""" pass def add_url(self, u"
"return [] def getCode(self): """""" Get the code as a single string """""" return """" def __init__(self, args, code): """""" Create the object"
return lambda: check_directory(location)
"return [CodeBlock(""mks"", 1)] def messages(location, receiver): """""" Construct a function that checks a directory for messages """""" return [CodeBlock(""mks"", 1)] def send_message(loc, receiver, message): """""" Construct a function that sends a message to a receiver"
"return self.status!= 405 """""" Returns the total number of requests received by the server in the past hour. # Add co"
pass # Your S
pass # Your 
"return TimerService(opt['freq'], makeConfig, makeMessage) def makeConfig(opt): """""" Make a configuration :params opt: dictionary-like object with'messages' :returns: twisted.application.internet.ConfigService that at opt['messages'] """""" return ConfigService(opt['messages']) def makeMessage(opt): """""" Make a message :params opt: dictionary-like object with 'freq' and 'config' :retur"
"return restarter """""" Return somethin"
"d = ddefer.Deferred() reactor.callLater(timeout, lambda: d.callback(None)) reactor.callLater(grace, lambda: d.callback(None)) return d """""" d = ddefer.Deferred() reactor.callLater(timeout, lambda: d.callback(None)) reactor.callLater(grace, lambda: d.callback(None)) return d """""" """""" d = ddefer.Deferred() return d """""" """""" d = ddefer.ScheduledJob(runProcess, args, timeout, grace) """""" """""" return d """""" """""" """""" return d """""" """""" """""" return d """""" """""" """""" return d """""" """""" """""" return d """""" """""" """""" return d """""" """""" """""" """""" return d """""" """""" """""" """""" """""" """""" return d """""" """""" """""" """""" """""" """""" """""" """""" """""" """""" """""""
self
supe
"myEnv = case[0] if myEnv is None else myEnv return myEnv, """""" Replace environment temporarily, restoring it at end of test """""" myEnv = case[0] if"
"master.add_service(Heart(master)) def maybeRemoveHeart(master): """""" Remove a heart from a service collectio"
"if contents['type'] =='restart': self.send_message(json.dumps({'type':'restart', 'contents': contents['contents']})) """""" Respond to a restart-all message """""" self.send_message(json.dumps({'type':'restart-all'})) """""" Packet: [0] size (int) = 4 [1] id (int) = 0 [2] off (int) = 0 [3] off (int) = 0 """""" class Solution: class OffSetTreeSolver: pass def solve(self, offset_tree): """""" Give"
self.processes[name] = self.processes[self.processes[name]] = self.processes[0] if __name__ == '__main__': # Your Process object will be 
import os import sys import getopt import
[places.process_list.add(Place(name=name, type='Process', family='Threa
"return TimerService(opt['freq'], makeConfig, makeMessage) def makeConfig(opt): """""" Make a config :params opt: dictionary-like object with'messages' :returns: twisted.application.internet.ConfigService that at opt['messages'] """""" return"
"return restarter - add_time(5): """""" Add 5 s"
restarter = {} path = [] for k, v in opt.items(): if k =='restarter': restarter = v elif k == 'path': path = v else: path.append(k) for p in path: restarter[p] = {} re
return keccak_256(data) # G
"return { 'id': generate_access_request_id(pid_value, users, confirmed), 'user_id': generate_user_id(users, confirmed), 'confirm': generate_confirm_id(confirmed) } """""" Access Request. """""" """""" Id: ... user_id: ... confirm: ... """""" [ { ""id"": ... ""user_id"": ... ""confirm"": ... """""" """""" Id: ... user_id: ..."
